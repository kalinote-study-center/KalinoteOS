     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				; 给486用的指令
     6 00000000                                 [BITS 32]						; 制作32位模式用的机器语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 源文件名信息
     8 00000000                                 		
     9 00000000                                 		; 程序中包含的函数名
    10 00000000                                 		; GLOBAL	_write_mem8
    11 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    12 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    13 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    14 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    15 00000000                                 
    16                                          [SECTION .text]					; 目标文件中写了这些之后在写程序
    17 00000000                                 
    18 00000000                                 _io_hlt:						; void io_hlt(void);
    19 00000000 F4                              		HLT
    20 00000001 C3                              		RET
    21 00000002                                 
    22 00000002                                 ; 这个函数使用指针替换了
    23 00000002                                 ;_write_mem8:					; void write_mem8(int addr, int data);
    24 00000002                                 ; 		MOV		ECX,[ESP+4]		; [ESP+4]中存放地址
    25 00000002                                 ;		MOV		AL,[ESP+8]		; [ESP+8]中存放数据
    26 00000002                                 ;		MOV		[ECX],AL
    27 00000002                                 ;		RET
    28 00000002                                 		
    29 00000002                                 _io_cli:						; void io_cli(void);
    30 00000002 FA                              		CLI
    31 00000003 C3                              		RET
    32 00000004                                 
    33 00000004                                 _io_sti:						; void io_sti(void);
    34 00000004 FB                              		STI
    35 00000005 C3                              		RET
    36 00000006                                 
    37 00000006                                 _io_stihlt:						; void io_stihlt(void);
    38 00000006 FB                              		STI
    39 00000007 F4                              		HLT
    40 00000008 C3                              		RET
    41 00000009                                 
    42 00000009                                 _io_in8:						; int io_in8(int port);
    43 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    44 0000000D B8 00000000                     		MOV		EAX,0
    45 00000012 EC                              		IN		AL,DX
    46 00000013 C3                              		RET
    47 00000014                                 
    48 00000014                                 _io_in16:						; int io_in16(int port);
    49 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    50 00000018 B8 00000000                     		MOV		EAX,0
    51 0000001D 66 ED                           		IN		AX,DX
    52 0000001F C3                              		RET
    53 00000020                                 
    54 00000020                                 _io_in32:						; int io_in32(int port);
    55 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 00000024 ED                              		IN		EAX,DX
    57 00000025 C3                              		RET
    58 00000026                                 
    59 00000026                                 _io_out8:						; void io_out8(int port, int data);
    60 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    61 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    62 0000002E EE                              		OUT		DX,AL
    63 0000002F C3                              		RET
    64 00000030                                 
    65 00000030                                 _io_out16:						; void io_out16(int port, int data);
    66 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    67 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    68 00000038 66 EF                           		OUT		DX,AX
    69 0000003A C3                              		RET
    70 0000003B                                 
    71 0000003B                                 _io_out32:						; void io_out32(int port, int data);
    72 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    73 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    74 00000043 EF                              		OUT		DX,EAX
    75 00000044 C3                              		RET
    76 00000045                                 
    77 00000045                                 _io_load_eflags:				; int io_load_eflags(void);
    78 00000045 9C                              		PUSHFD					; 指PUSH EFLAGS
    79 00000046 58                              		POP		EAX
    80 00000047 C3                              		RET
    81 00000048                                 
    82 00000048                                 _io_store_eflags:				; void io_store_eflags(int eflags);
    83 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    84 0000004C 50                              		PUSH	EAX
    85 0000004D 9D                              		POPFD					; 指POP EFLAGS
    86 0000004E C3                              		RET
